#pragma version 5

// EP
pushbytes "abcdefghijkl"
store 0
// CP
pushbytes "abcdefgh"
store 1
// EO
pushbytes 0x020202020202020202020202 // 12 bytes
store 2
// CO
pushbytes 0x0303030303030303 // 8 bytes
store 3

////////// main

callsub _Rp
callsub _Up
callsub _F
callsub _Dp
callsub _Bp
callsub _D
callsub _Bp
callsub _D
callsub _Fp
callsub _L
callsub _L
callsub _B
callsub _Up
callsub _F
callsub _F
callsub _L
callsub _D
callsub _D
callsub _L
callsub _D
callsub _D
callsub _B
callsub _B
callsub _R
callsub _R
callsub _F
callsub _F
callsub _L
callsub _U
callsub _U
callsub _B
callsub _B
callsub _Rp
callsub _Up
callsub _F
callsub _Up
callsub _Dp
callsub _R
callsub _U
callsub _U
callsub _R
callsub _R
callsub _Bp
callsub _Lp
callsub _B
callsub _Lp
callsub _Fp
callsub _U
callsub _U
callsub _D
callsub _D
callsub _B
callsub _Rp
callsub _D
callsub _D
callsub _Bp

// Apply moves
// TODO

// Check if cube is solved
callsub is_solved
return

////////// Branches

////// Move definition

// CORNERS
// UBL UBR UFR UFL DFL DFR DBR DBL = 0 1 2 3 4 5 6 7 8
// 0 = oriented, 1 = turned clockwise, 2 = turned counter-clockwise
// EDGES
// UB UR UF UL BL BR FR FL DF DR DB DL = 0 1 2 3 4 5 6 7 8 9 10 11
// 0 = oriented, 1 = unoriented

//// Clockwise

_R:
    // CP
    int 1
    int 6
    int 5
    int 2
    callsub permute_c
    // EP
    int 1
    int 5
    int 9
    int 6
    callsub permute_e
    // CO
    pushbytes 0x0001020000010200
    callsub orient_c
    retsub

_U:
    // CP
    int 0
    int 1
    int 2
    int 3
    callsub permute_c
    // EP
    int 0
    int 1
    int 2
    int 3
    callsub permute_e
    retsub

_F:
    // CP
    int 3
    int 2
    int 5
    int 4
    callsub permute_c
    // EP
    int 2
    int 6
    int 8
    int 7
    callsub permute_e
    // CO
    pushbytes 0x0000010201020000
    callsub orient_c
    // EO
    pushbytes 0x000001000000010101000000
    callsub orient_e
    retsub

_L:
    // CP
    int 0
    int 3
    int 4
    int 7
    callsub permute_c
    // EP
    int 3
    int 7
    int 11
    int 4
    callsub permute_e
    // CO
    pushbytes 0x0200000102000001
    callsub orient_c
    retsub

_D:
    // CP
    int 4
    int 5
    int 6
    int 7
    callsub permute_c
    // EP
    int 8
    int 9
    int 10
    int 11
    callsub permute_e
    retsub

_B:
    // CP
    int 1
    int 0
    int 7
    int 6
    callsub permute_c
    // EP
    int 0
    int 4
    int 10
    int 5
    callsub permute_e
    // CO
    pushbytes 0x0102000000000102
    callsub orient_c
    // EO
    pushbytes 0x010000000101000000000100
    callsub orient_e
    retsub

//// Counter-clockwise

_Rp:
    // CP
    int 2
    int 5
    int 6
    int 1
    callsub permute_c
    // EP
    int 6
    int 9
    int 5
    int 1
    callsub permute_e
    // CO
    pushbytes 0x0001020000010200
    callsub orient_c
    retsub

_Up:
    // CP
    int 3
    int 2
    int 1
    int 0
    callsub permute_c
    // EP
    int 3
    int 2
    int 1
    int 0
    callsub permute_e
    retsub

_Fp:
    // CP
    int 4
    int 5
    int 2
    int 3
    callsub permute_c
    // EP
    int 7
    int 8
    int 6
    int 2
    callsub permute_e
    // CO
    pushbytes 0x0000010201020000
    callsub orient_c
    // EO
    pushbytes 0x000001000000010101000000
    callsub orient_e
    retsub

_Lp:
    // CP
    int 7
    int 4
    int 3
    int 0
    callsub permute_c
    // EP
    int 4
    int 11
    int 7
    int 3
    callsub permute_e
    // CO
    pushbytes 0x0200000102000001
    callsub orient_c
    retsub

_Dp:
    // CP
    int 7
    int 6
    int 5
    int 4
    callsub permute_c
    // EP
    int 11
    int 10
    int 9
    int 8
    callsub permute_e
    retsub

_Bp:
    // CP
    int 6
    int 7
    int 0
    int 1
    callsub permute_c
    // EP
    int 5
    int 10
    int 4
    int 0
    callsub permute_e
    // CO
    pushbytes 0x0102000000000102
    callsub orient_c
    // EO
    pushbytes 0x010000000101000000000100
    callsub orient_e
    retsub

//// Half-turns
// procrastinate native half-turn support until it is really necessary

////// Permutation and orientation branches

permute_e:
    // pops: ...stack, A, B, C, D
    // cycles edges A->B->C->D (EP and EO)
    // pushes: ...stack
    dig 3
    dig 3
    dig 3
    dig 3
    load 0
    callsub rotatebytes
    store 0
    load 2
    callsub rotatebytes
    store 2
    retsub

permute_c:
    // pops: ...stack, A, B, C, D
    // cycles corners A->B->C->D (CP and CO)
    // pushes: ...stack
    dig 3
    dig 3
    dig 3
    dig 3
    load 1
    callsub rotatebytes
    store 1
    load 3
    callsub rotatebytes
    store 3
    retsub

orient_e:
    // pops: ...stack, m
    // applies orientation mask to EO byte array (mod2 at check)
    // pushes: ...stack
    load 2
    b+
    store 2
    retsub

orient_c:
    // pops: ...stack, m
    // applies orientation mask to CO byte array (mod3 at check)
    // pushes: ...stack
    btoi // to save opcode cost
    load 3
    btoi
    +
    itob
    store 3
    retsub

////// Fundamentals

swapbytes:
    // pops: ...stack, X, Y, b
    // b[X], b[Y] = b[Y], b[X]
    // pushes: ...stack, b'
    dup
    dig 2
    getbyte
    swap
    dup
    dig 4
    getbyte
    uncover 3
    swap
    setbyte
    cover 2
    setbyte
    retsub

rotatebytes:
    // pops: ...stack, A, B, C, D, b
    // b[A], b[B], b[C], b[D] = b[D], b[A], b[B], b[C]
    // pushes: ...stack, b'''

    // Swap last two
    dig 2       // A B C D b C
    cover 2     // A B C C D b
    callsub swapbytes // WXYZ -> WXZY (A B C b')
    // Swap mid two
    dig 2       // A B C b' B
    cover 2     // A B B C b'
    callsub swapbytes // WXZY -> WZXS (A B b'')
    // Swap first two
    callsub swapbytes // WZXY -> ZWXY (b''')
    retsub

////// Solved state checks

is_solved:
    // pops: ...stack
    // Pushes a 1 if cube is solved
    // pushes: ...stack, 0|1
    // Check EP
    load 0
    pushbytes "abcdefghijkl"
    ==
    // Check CP
    load 1
    pushbytes "abcdefgh"
    ==
    &&
    // Check EO (item-wise mod2)
    load 2
    pushbytes 0x010101010101010101010101
    b&
    pushbytes 0x000000000000000000000000
    ==
    &&
    // Check CO (item-wise mod3)
    load 3
    callsub check_co
    &&
    retsub

check_co:
    // pops: ...stack, co
    // Checks if co byte[] is solved (all bytes are 0 mod 3)
    // pushes: ...stack, 1|0
    // Copy thing to scratch space to save opcodes
    dup
    store 20
    // Check that every byte mod 3 = 0
    int 0
    getbyte
    int 3
    %
    load 20
    int 1
    getbyte
    int 3
    %
    load 20
    int 2
    getbyte
    int 3
    %
    load 20
    int 3
    getbyte
    int 3
    %
    load 20
    int 4
    getbyte
    int 3
    %
    load 20
    int 5
    getbyte
    int 3
    %
    load 20
    int 6
    getbyte
    int 3
    %
    load 20
    int 7
    getbyte
    int 3
    %
    // We should have eight 8s on the stack, therefore seven ||s should yield a 0
    ||
    ||
    ||
    ||
    ||
    ||
    ||
    ! // If we got 0 it's all good, negate it so that we return 1
    retsub
